mutate(Location = as.factor(Location))
dfcold$Stimulus = relevel(dfcold$Stimulus, ref = "TGI")
## Due to singular convergence have to not include regressors on 0's
main_cold <- gamlss(VAS_Cold ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID), #+vasReactionTime_Cold
nu.formula = ~1 + re(random = ~ 1 |  experiment/ID),#1,
tau.formula = ~ 1 + re(random = ~ 1 |  experiment/ID),#1,
sigma.formula = ~1 + Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
data = dfcold,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = F))
summary(main_cold)
# Statistics for manuscript
stats_main_cold <- summary_stats_zoib_new(main_cold, coefficients = 8, round = 2, part = "mu")
# Simulated residuals:
plot(main_cold)
main_cold
summary(main_cold)
dfwarm = df %>% dplyr::select(ID, Trial_N, Quartile, Burning_prob,Stim_dur, experiment, VAS_Warm, Stimulus,Location)%>%
mutate(Location = as.factor(Location))
dfwarm$Stimulus = relevel(dfwarm$Stimulus, ref = "TGI")
main_warm <- gamlss(VAS_Warm ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID), #+vasReactionTime_Cold
nu.formula = ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),#1,
tau.formula = ~ 1 + re(random = ~ 1 |  experiment/ID),#1,
sigma.formula = ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID),
data = dfwarm,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = F))
summary(main_warm)
# Statistics for manuscript
stats_main_warm <- summary_stats_zoib_new(main_warm, coefficients = 8, round = 2, part = "mu")
# Simulated residuals:
plot(main_warm)
dfburn = df %>% dplyr::select(ID, Trial_N, Quartile, Burning_prob, Stim_dur, experiment, VAS_Burn, Stimulus, Location)%>%
mutate(Location = as.factor(Location))
dfburn$Stimulus = relevel(dfburn$Stimulus, ref = "TGI")
main_burn<- gamlss(VAS_Burn ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID), #+vasReactionTime_Cold
nu.formula = ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),#1,
tau.formula = ~ 1 + re(random = ~ 1 |  experiment/ID),#1,
sigma.formula = ~1 + Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
data = dfburn,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = F))
summary(main_burn)
# Statistics for manuscript
stats_main_burn <- summary_stats_zoib_new(main_burn, coefficients = 8, round = 2, part = "mu")
# Simulated residuals:
plot(main_burn)
summary(main_burn)
summary(main_warm)
# Summary of the regression
summary(main_sensation)
# Testing the quality of the sensation
# Normalized difference
df$coldwarm_ratio <- df$VAS_Cold / (df$VAS_Cold + df$VAS_Warm)
df_coldwarm <- df%>% dplyr::select(coldwarm_ratio, Burning_prob, Quartile, Trial_N, Stim_dur, ID, Stimulus,experiment,Location) %>% drop_na() %>%
mutate(Location = as.factor(Location))
df_coldwarm$Stimulus = relevel(df_coldwarm$Stimulus, ref = "TGI")
main_sensation <- gamlss(coldwarm_ratio ~  Burning_prob + Quartile * Stimulus + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
nu.formula = ~ Stimulus + re(random = ~ 1 |  ID),
tau.formula = ~ Stimulus + re(random = ~ 1 |  ID),
sigma.formula = ~  Burning_prob + Quartile * Stimulus + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
data = df_coldwarm,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = T))
# Summary of the regression
summary(main_sensation)
# Statistics for manuscript
stats_main_sensation <- summary_stats_zoib_new(main_sensation, coefficients = 10, round = 2, part = "mu")
# Simulated residuals:
plot(main_sensation)
# Summary of the regression
summary(main_sensation)
summary(main_burn)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape, gamlss, scales, osfr)
source(here::here("scripts","Utility_functions.R"))
df = prep_data(per_threshold = F)
# Retrieve the OSF authentication token if the file exists
osf_file_path <- here::here("osf","osf.txt")
if (file.exists(osf_file_path)) {
osf_auth(token = read_lines(osf_file_path)[1])
osf_token <- read_lines(osf_file_path)[1]
Multi = osf_retrieve_node("https://osf.io/rmytj/")
Multi %>% osfr::osf_ls_files(pattern = "Workspace") %>%
osfr::osf_download(path = here::here(), recurse = TRUE, conflicts = "overwrite")
} else {
stop("OSF token file does not exist!")
}
dfcold = df %>% dplyr::select(ID, Trial_N, Quartile, Burning_prob, Stim_dur, experiment, VAS_Cold, Stimulus,Location) %>%
mutate(Location = as.factor(Location))
dfcold$Stimulus = relevel(dfcold$Stimulus, ref = "TGI")
## Due to singular convergence have to not include regressors on 0's
main_cold <- gamlss(VAS_Cold ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID), #+vasReactionTime_Cold
nu.formula = ~1 + re(random = ~ 1 |  experiment/ID),#1,
tau.formula = ~ 1 + re(random = ~ 1 |  experiment/ID),#1,
sigma.formula = ~1 + Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
data = dfcold,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = F))
summary(main_cold)
# Statistics for manuscript
stats_main_cold <- summary_stats_zoib_new(main_cold, coefficients = 8, round = 2, part = "mu")
# Simulated residuals:
plot(main_cold)
dfwarm = df %>% dplyr::select(ID, Trial_N, Quartile, Burning_prob,Stim_dur, experiment, VAS_Warm, Stimulus,Location)%>%
mutate(Location = as.factor(Location))
dfwarm$Stimulus = relevel(dfwarm$Stimulus, ref = "TGI")
main_warm <- gamlss(VAS_Warm ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID), #+vasReactionTime_Cold
nu.formula = ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),#1,
tau.formula = ~ 1 + re(random = ~ 1 |  experiment/ID),#1,
sigma.formula = ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID),
data = dfwarm,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = F))
summary(main_warm)
# Statistics for manuscript
stats_main_warm <- summary_stats_zoib_new(main_warm, coefficients = 8, round = 2, part = "mu")
# Simulated residuals:
plot(main_warm)
dfburn = df %>% dplyr::select(ID, Trial_N, Quartile, Burning_prob, Stim_dur, experiment, VAS_Burn, Stimulus, Location)%>%
mutate(Location = as.factor(Location))
dfburn$Stimulus = relevel(dfburn$Stimulus, ref = "TGI")
main_burn<- gamlss(VAS_Burn ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 | experiment/ID), #+vasReactionTime_Cold
nu.formula = ~ Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),#1,
tau.formula = ~ 1 + re(random = ~ 1 |  experiment/ID),#1,
sigma.formula = ~1 + Stimulus * Burning_prob + Quartile + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
data = dfburn,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = F))
summary(main_burn)
# Statistics for manuscript
stats_main_burn <- summary_stats_zoib_new(main_burn, coefficients = 8, round = 2, part = "mu")
# Simulated residuals:
plot(main_burn)
# Testing the quality of the sensation
# Normalized difference
df$coldwarm_ratio <- df$VAS_Cold / (df$VAS_Cold + df$VAS_Warm)
df_coldwarm <- df%>% dplyr::select(coldwarm_ratio, Burning_prob, Quartile, Trial_N, Stim_dur, ID, Stimulus,experiment,Location) %>% drop_na() %>%
mutate(Location = as.factor(Location))
df_coldwarm$Stimulus = relevel(df_coldwarm$Stimulus, ref = "TGI")
main_sensation <- gamlss(coldwarm_ratio ~  Burning_prob + Quartile * Stimulus + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
nu.formula = ~ Stimulus + re(random = ~ 1 |  ID),
tau.formula = ~ Stimulus + re(random = ~ 1 |  ID),
sigma.formula = ~  Burning_prob + Quartile * Stimulus + Trial_N + Stim_dur + re(random = ~ 1 |  experiment/ID),
data = df_coldwarm,
family = BEINF(mu.link = "logit",sigma.link = "logit",nu.link = "logit",tau.link = "logit"),
control = gamlss.control(n.cyc = 50, trace = T))
# Summary of the regression
summary(main_sensation)
# Statistics for manuscript
stats_main_sensation <- summary_stats_zoib_new(main_sensation, coefficients = 10, round = 2, part = "mu")
# Simulated residuals:
plot(main_sensation)
alldata <- read.csv(here::here("data","fastTrl.csv"))
#parameter means and standard erros:
parameters = c("t0","t30","alpha","S")
errors = paste0(parameters, "_se")
#getting the means (last trial of PSI)
q = alldata %>%
dplyr::group_by(sub) %>%
summarize(lastS = last(S), lastt0 = last(t0), lastt30 = last(t30), lastalpha = last(alpha)) %>%
pivot_longer(cols = paste0("last",parameters), values_to = "mean_values", names_to = "parameters")
#getting the standard errors (last trial of PSI)
q_se = alldata %>%
dplyr::group_by(sub) %>%
summarize(lastS_se = last(S_se), lastt0_se = last(t0_se), lastt30_se = last(t30_se), lastalpha_se = last(alpha_se)) %>%
pivot_longer(cols = paste0("last",parameters,"_se"), values_to = "se_values", names_to = "parameters") %>% mutate(parameters = str_remove(parameters, "_se"))
#combine
vals = inner_join(q,q_se)
# for each parameter we do bootstrapping to get real group level estiamtes:
params_df = data.frame()
for(parameter in parameters){
#get the right parameter:
parameter = paste0("last",parameter)
#Lazy way of no error propergation:
without_error_prop = vals %>% filter(parameters == parameter) %>% summarize(mean = mean(mean_values), sd = sd(mean_values))
#with:
with_error_prop = vals %>% filter(parameters == parameter) %>% rowwise() %>%
mutate(new_mean = list(rnorm(10000,mean_values, se_values))) %>%
unnest() %>% summarize(mean = mean(new_mean), sd = sd(new_mean))
#save data.
params_df = rbind(params_df,without_error_prop %>% mutate(error_prop = "F", parameters = parameter))
params_df = rbind(params_df,with_error_prop %>% mutate(error_prop = "T", parameters = parameter))
}
# Plotting to demonstrate: the difference
vals %>% mutate(error_prop = NA) %>% ggplot()+
geom_pointrange(aes(x = sub, y = mean_values, ymin = mean_values - 2 * se_values, ymax = mean_values + 2 * se_values))+
facet_wrap(~parameters, scales = "free")+
geom_pointrange(data = params_df, aes(x = 0, y = mean, ymin = mean - 2 * sd, ymax = mean + 2 * sd, col = error_prop), position = position_dodge(width = 3), alpha = 1)
# saving only the error proporgation
TGIF_parameters = params_df %>% filter(error_prop == "T")
# Same as for TGI parameters now for cold and heat pain thresholds:
alldata <- read.csv(here::here("data","psi.csv")) %>% filter(quality == "cold")
parameters = c("threshold","slope")
errors = paste0(parameters, "_se")
q = alldata %>%
dplyr::group_by(sub) %>%
summarize(lastthreshold = last(threshold), lastslope = last(slope)) %>%
pivot_longer(cols = paste0("last",parameters), values_to = "mean_values", names_to = "parameters")
q_se = alldata %>%
dplyr::group_by(sub) %>%
summarize(lastthreshold_se = last(threshold_se), lastslope_se = last(slope)) %>%
pivot_longer(cols = paste0("last",parameters,"_se"), values_to = "se_values", names_to = "parameters") %>% mutate(parameters = str_remove(parameters, "_se"))
vals = inner_join(q,q_se)
vals %>% ggplot(aes(x = sub, y = mean_values, ymin = mean_values-2*se_values,ymax = mean_values+2*se_values))+geom_pointrange()+facet_wrap(~parameters, scales = "free")
params_df = data.frame()
for(parameter in parameters){
parameter = paste0("last",parameter)
without_error_prop = vals %>% filter(parameters == parameter) %>% summarize(mean = mean(mean_values), sd = sd(mean_values))
with_error_prop = vals %>% filter(parameters == parameter) %>% rowwise() %>%
mutate(new_mean = list(rnorm(10000,mean_values, se_values))) %>%
unnest() %>% summarize(mean = mean(new_mean), sd = sd(new_mean))
params_df = rbind(params_df,without_error_prop %>% mutate(error_prop = "F", parameters = parameter))
params_df = rbind(params_df,with_error_prop %>% mutate(error_prop = "T", parameters = parameter))
}
vals %>% mutate(error_prop = NA) %>% ggplot()+
geom_pointrange(aes(x = sub, y = mean_values, ymin = mean_values - 2 * se_values, ymax = mean_values + 2 * se_values))+
facet_wrap(~parameters, scales = "free")+
geom_pointrange(data = params_df, aes(x = 0, y = mean, ymin = mean - 2 * sd, ymax = mean + 2 * sd, col = error_prop), position = position_dodge(width = 3), alpha = 1)
#save in a dataframe
cold_painthresholds = params_df %>% filter(error_prop == "T")
alldata <- read.csv(here::here("data","psi.csv")) %>% filter(quality == "warm")
parameters = c("threshold","slope")
errors = paste0(parameters, "_se")
q = alldata %>%
dplyr::group_by(sub) %>%
summarize(lastthreshold = last(threshold), lastslope = last(slope)) %>%
pivot_longer(cols = paste0("last",parameters), values_to = "mean_values", names_to = "parameters")
q_se = alldata %>%
dplyr::group_by(sub) %>%
summarize(lastthreshold_se = last(threshold_se), lastslope_se = last(slope)) %>%
pivot_longer(cols = paste0("last",parameters,"_se"), values_to = "se_values", names_to = "parameters") %>% mutate(parameters = str_remove(parameters, "_se"))
vals = inner_join(q,q_se)
vals %>% ggplot(aes(x = sub, y = mean_values, ymin = mean_values - 2 * se_values, ymax = mean_values + 2 * se_values)) +
geom_pointrange() +
facet_wrap(~parameters, scales = "free")
params_df = data.frame()
for(parameter in parameters){
parameter = paste0("last",parameter)
without_error_prop = vals %>% filter(parameters == parameter) %>% summarize(mean = mean(mean_values), sd = sd(mean_values))
with_error_prop = vals %>% filter(parameters == parameter) %>% rowwise() %>%
mutate(new_mean = list(rnorm(10000,mean_values, se_values))) %>%
unnest() %>% summarize(mean = mean(new_mean), sd = sd(new_mean))
params_df = rbind(params_df,without_error_prop %>% mutate(error_prop = "F", parameters = parameter))
params_df = rbind(params_df,with_error_prop %>% mutate(error_prop = "T", parameters = parameter))
}
vals %>% mutate(error_prop = NA) %>% ggplot()+
geom_pointrange(aes(x = sub, y = mean_values, ymin = mean_values - 2 * se_values, ymax = mean_values + 2 * se_values))+
facet_wrap(~parameters, scales = "free") +
geom_pointrange(data = params_df, aes(x = 0, y = mean, ymin = mean - 2 * sd, ymax = mean + 2 * sd, col = error_prop), position = position_dodge(width = 3), alpha = 1)
heat_painthresholds = params_df %>% filter(error_prop == "T")
prop_0_cold = get_prop(0, df,quality = "Cold")*100
prop_1_cold = get_prop(1, df,quality = "Cold")*100
prop_0_warm = get_prop(0, df,quality = "Warm")*100
prop_1_warm = get_prop(1, df,quality = "Warm")*100
prop_0_burn = get_prop(0, df,quality = "Burn")*100
prop_1_burn = get_prop(1, df,quality = "Burn")*100
# Get a list of all variable names that start with "stats_"
stats_vars <- ls(pattern = "^stats_")
props <- ls(pattern = "^prop_")
# # Combine the variable names into a single vector
vars_to_save <- c(stats_vars, props, "TGIF_parameters", "heat_painthresholds", "cold_painthresholds")
#
# # Save the variables to a file
base::save(list = vars_to_save, file = here::here( "Workspace", "reporting_statistics.RData"))
# Combine the variable names into a single vector
vars_to_save <- c(
"main_warm", "dfwarm",
"main_cold", "dfcold",
"main_burn", "dfburn",
"main_sensation","df_coldwarm"
)
# Save the variables to a file
base::save(list = vars_to_save, file = here::here( "Workspace", "supplementary_workspace.RData"),compress = "xz")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape, gamlss, scales, flextable, osfr)
source(here::here("scripts","Utility_functions.R"))
load(here::here("Workspace","supplementary_workspace.RData"))
table_main_cold = get_main_tables(main_cold,
2)%>%
set_caption(caption = " ") %>%  #this is above the table
add_footer_lines("Table 1, Cold ratings") #this is below
table_main_warm = get_main_tables(main_warm,
2)%>%
set_caption(caption = " ") %>%  #this is above the table
add_footer_lines("Table 2, Warm ratings") #this is below
table_main_burn = get_main_tables(main_burn,
2)%>%
set_caption(caption = " ") %>%  #this is above the table
add_footer_lines("Table 3, Burn ratings") #this is below
table_main_sensation = get_main_tables(main_sensation,
2)%>%
set_caption(caption = " ") %>%  #this is above the table
add_footer_lines("Table 4, Thermosensory index") #this is below
# Combine the variable names into a single vector
tables <- ls(pattern = "^table_")
vars_to_save <- c(tables)
# Save the variables to a file
save(list = vars_to_save, file = here::here("Workspace","tables_for_supplementary.RData"))
#Loading packages
knitr::opts_chunk$set(echo = TRUE)
required_packages = c("cowplot", "magick", "tidyverse", "flextable", "osfr", "bayestestR","ggh4x","patchwork")
lapply(required_packages, library, character.only = TRUE)
base::load(here::here("Workspace", "tables_for_supplementary.RData"))
source(here::here("scripts","plots.R"))
ggdraw() +
draw_image(magick::image_read(here::here("Figures","figS1_conv_means.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","figS2_conv_se.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","figS3_cpt.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","figS4_hpt.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","figS5_burningthresholds.png")), scale = 1)
table_main_cold
table_main_warm
table_main_burn
table_main_sensation
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape,gamlss,scales, flextable,gghalves, patchwork,bayestestR,ggh4x)
source(here::here("scripts","Utility_functions.R"))
source(here::here("scripts","plots.R"))
plot_3 = plot3()
plot_3
ggsave(here::here("Figures","fig3.png"), plot_3[[1]], dpi = 600, height = 6, width = 6)
write.csv(plot_3[[2]],here::here("Figures","fig3_report.csv"))
#all participants
subers_full_all = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
35, 36, 37, 38, 39, 40, 41, 42, 43)
#sub section
subers_full_section = c(3,4,5,6,8,17,18,21,25,26,30,34,38,39,41,42)
plot_4 = plot4(tminwarm = 30, tmaxwarm = 50, subers = subers_full_section)
plot_4
ggsave(here::here("Figures","fig4.png"), plot_4[[1]], dpi = 600, height = 7.2, width = 7.2)
plot5 = plot5()
plot5
ggsave(here::here("Figures","fig5.png"), plot5, dpi = 600, width = 8, height = 6)
plot6 = plot6()
plot6
ggsave(here::here("Figures","fig6.png"), plot6, dpi = 600, width = 8, height = 6)
plot7 = plot7()
plot7
ggsave(here::here("Figures","fig7.png"), plot7, dpi = 600, width = 8, height = 6)
conv_plot = conv_plot()
conv_means = conv_plot[[1]]
conv_se = conv_plot[[2]]
ggsave(here::here("Figures","figS1_conv_means.png"), conv_means, dpi = 600, height = 6, width = 8)
ggsave(here::here("Figures","figS2_conv_se.png"), conv_se, dpi = 600, height = 6, width = 8)
CPT = CPT_plot()[[1]]
CPT
ggsave(here::here("Figures","figS3_cpt.png"), CPT, dpi = 600, height = 6, width = 8)
HPT = HPT_plot()[[1]]
HPT
ggsave(here::here("Figures","figS4_hpt.png"), HPT, dpi = 600, height = 6, width = 8)
fullplot7 = Full_plot_7()
fullplot7
ggsave(here::here("Figures","figS5_burningthresholds.png"), fullplot7, dpi = 600, height = 6, width = 8)
plot6 = plot6()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape,gamlss,scales, flextable,gghalves, patchwork,bayestestR,ggh4x)
source(here::here("scripts","Utility_functions.R"))
source(here::here("scripts","plots.R"))
plot_3 = plot3()
plot_3
ggsave(here::here("Figures","fig3.png"), plot_3[[1]], dpi = 600, height = 6, width = 6)
write.csv(plot_3[[2]],here::here("Figures","fig3_report.csv"))
#all participants
subers_full_all = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
35, 36, 37, 38, 39, 40, 41, 42, 43)
#sub section
subers_full_section = c(3,4,5,6,8,17,18,21,25,26,30,34,38,39,41,42)
plot_4 = plot4(tminwarm = 30, tmaxwarm = 50, subers = subers_full_section)
plot_4
ggsave(here::here("Figures","fig4.png"), plot_4[[1]], dpi = 600, height = 7.2, width = 7.2)
plot5 = plot5()
plot5
ggsave(here::here("Figures","fig5.png"), plot5, dpi = 600, width = 8, height = 6)
plot6 = plot6()
plot6
ggsave(here::here("Figures","fig6.png"), plot6, dpi = 600, width = 6, height = 4)
plot7 = plot7()
plot7
ggsave(here::here("Figures","fig7.png"), plot7, dpi = 600, width = 8, height = 6)
conv_plot = conv_plot()
conv_means = conv_plot[[1]]
conv_se = conv_plot[[2]]
ggsave(here::here("Figures","figS1_conv_means.png"), conv_means, dpi = 600, height = 6, width = 8)
ggsave(here::here("Figures","figS2_conv_se.png"), conv_se, dpi = 600, height = 6, width = 8)
CPT = CPT_plot()[[1]]
CPT
ggsave(here::here("Figures","figS3_cpt.png"), CPT, dpi = 600, height = 6, width = 8)
HPT = HPT_plot()[[1]]
HPT
ggsave(here::here("Figures","figS4_hpt.png"), HPT, dpi = 600, height = 6, width = 8)
fullplot7 = Full_plot_7()
fullplot7
ggsave(here::here("Figures","figS5_burningthresholds.png"), fullplot7, dpi = 600, height = 6, width = 8)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape,gamlss,scales, flextable,gghalves, patchwork,bayestestR,ggh4x)
source(here::here("scripts","Utility_functions.R"))
source(here::here("scripts","plots.R"))
plot_3 = plot3()
plot_3
ggsave(here::here("Figures","fig3.png"), plot_3[[1]], dpi = 600, height = 6, width = 6)
write.csv(plot_3[[2]],here::here("Figures","fig3_report.csv"))
#all participants
subers_full_all = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
35, 36, 37, 38, 39, 40, 41, 42, 43)
#sub section
subers_full_section = c(3,4,5,6,8,17,18,21,25,26,30,34,38,39,41,42)
plot_4 = plot4(tminwarm = 30, tmaxwarm = 50, subers = subers_full_section)
plot_4
ggsave(here::here("Figures","fig4.png"), plot_4[[1]], dpi = 600, height = 7.2, width = 7.2)
plot5 = plot5()
plot5
ggsave(here::here("Figures","fig5.png"), plot5, dpi = 600, width = 8, height = 6)
plot6 = plot6()
plot6
ggsave(here::here("Figures","fig6.png"), plot6, dpi = 600, width = 6, height = 4)
plot7 = plot7()
plot7
ggsave(here::here("Figures","fig7.png"), plot7, dpi = 600, width = 6, height = 4)
conv_plot = conv_plot()
conv_means = conv_plot[[1]]
conv_se = conv_plot[[2]]
ggsave(here::here("Figures","figS1_conv_means.png"), conv_means, dpi = 600, height = 6, width = 8)
ggsave(here::here("Figures","figS2_conv_se.png"), conv_se, dpi = 600, height = 6, width = 8)
CPT = CPT_plot()[[1]]
CPT
ggsave(here::here("Figures","figS3_cpt.png"), CPT, dpi = 600, height = 6, width = 8)
HPT = HPT_plot()[[1]]
HPT
ggsave(here::here("Figures","figS4_hpt.png"), HPT, dpi = 600, height = 6, width = 8)
fullplot7 = Full_plot_7()
fullplot7
ggsave(here::here("Figures","figS5_burningthresholds.png"), fullplot7, dpi = 600, height = 6, width = 8)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape,gamlss,scales, flextable,gghalves, patchwork,bayestestR,ggh4x)
source(here::here("scripts","Utility_functions.R"))
source(here::here("scripts","plots.R"))
plot_3 = plot3()
plot_3
ggsave(here::here("Figures","fig3.png"), plot_3[[1]], dpi = 600, height = 6, width = 6)
write.csv(plot_3[[2]],here::here("Figures","fig3_report.csv"))
#all participants
subers_full_all = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
35, 36, 37, 38, 39, 40, 41, 42, 43)
#sub section
subers_full_section = c(3,4,5,6,8,17,18,21,25,26,30,34,38,39,41,42)
plot_4 = plot4(tminwarm = 30, tmaxwarm = 50, subers = subers_full_section)
plot_4
ggsave(here::here("Figures","fig4.png"), plot_4[[1]], dpi = 600, height = 7.2, width = 7.2)
plot5 = plot5()
plot5
ggsave(here::here("Figures","fig5.png"), plot5, dpi = 600, width = 8, height = 6)
plot6 = plot6()
plot6
ggsave(here::here("Figures","fig6.png"), plot6, dpi = 600, width = 6, height = 4)
plot7 = plot7()
plot7
ggsave(here::here("Figures","fig7.png"), plot7, dpi = 600, width = 6, height = 4)
conv_plot = conv_plot()
conv_means = conv_plot[[1]]
conv_se = conv_plot[[2]]
ggsave(here::here("Figures","figS1_conv_means.png"), conv_means, dpi = 600, height = 6, width = 8)
ggsave(here::here("Figures","figS2_conv_se.png"), conv_se, dpi = 600, height = 6, width = 8)
CPT = CPT_plot()[[1]]
CPT
ggsave(here::here("Figures","figS3_cpt.png"), CPT, dpi = 600, height = 6, width = 8)
HPT = HPT_plot()[[1]]
HPT
ggsave(here::here("Figures","figS4_hpt.png"), HPT, dpi = 600, height = 6, width = 8)
fullplot7 = Full_plot_7()
fullplot7
ggsave(here::here("Figures","figS5_burningthresholds.png"), fullplot7, dpi = 600, height = 6, width = 8)
knitr::opts_chunk$set(dpi=300)
# seed
set.seed(123)
# packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load("here", "knitr","yaml")
#renv::restore(project=here::here())
required_packages = c("cowplot", "tidyverse", "osfr") #, "magick", "flextable"
lapply(required_packages, library, character.only = TRUE)
#get the users knitting
knit = knitr::opts_knit$get("rmarkdown.pandoc.to")
base::load(here::here("Workspace","reporting_statistics.RData"))
source(here::here("scripts","Utility_functions.R"))
fig3_stats = read.csv(here::here("Figures","fig3_report.csv"))
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig1.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig2.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig3.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig4.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig5.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig6.png")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("Figures","fig7.png")), scale = 1)
load("~/tgi-thresholding/Workspace/supplementary_workspace.RData")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, tidyverse, DHARMa, glmmTMB, reshape, gamlss, scales)
load(here::here("Workspace","supplementary_workspace.RData"))
